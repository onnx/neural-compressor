[tool.isort]
profile = "black"
line_length = 120
extend_skip_glob = ["**/__init__.py"]

[tool.black]
line-length = 120

[tool.codespell]
skip = '*.po,*.ts,*.js,*.map,*.js.map,*.css.map,.azure-pipelines/scripts/codeScan/codespell/inc_dict.txt'
count = ''
quiet-level = 3
ignore-words = ".azure-pipelines/scripts/codeScan/codespell/nc_dict.txt"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]

select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "FA", # flake8-future-annotations
    "G", # flake8-logging-format
    "I002", # isort: required imports
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N", # pep8-naming
    "NPY", # modern numpy
    "PERF", # Perflint
    "PIE", # flake8-pie
    "PL", # pylint
    "PYI", # flake8-pyi
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLOT", # flake8-slot
    "T10", # flake8-debugger
    "TID", # Disallow relative imports
    "TRY", # flake8-try-except-raise
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
# NOTE: Refrain from growing the ignore list unless for exceptional cases.
# Always include a comment to explain why.
ignore = [
    "D1", # D1 is for missing docstrings, which is not yet enforced.
    "E501", # Line length controlled by formatter
    "NPY002", # np.random.Generator may not be preferred in all cases
    "PLR09", # Ignore the pylint "too-many-*" rules
    "PYI011", # Allow protobuf enums as defaults to function arguments
    "PYI021", # Allow docstrings in pyi files
    "PYI041", # int | float is sometimes more clear than float
    "RUF015", # next(iter(...)) sometimes obscures the intent when we access the 0th element of a shape
    "SIM102", # We don't perfer always combining if branches
    "SIM108", # We don't always encourage ternary operators
    "SIM114", # Don't always combine if branches for debugability
    "SIM116", # Don't use dict lookup to replace if-else
    "TRY003", # Messages can be constructed in the exception
]

ignore-init-module-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
